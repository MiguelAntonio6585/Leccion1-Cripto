import string
from collections import Counter

# Frecuencias aproximadas de las letras en inglés (en porcentaje)
frecuencias_ingles = {
    'A': 8.167, 'B': 1.492, 'C': 2.782, 'D': 4.253, 'E': 12.702, 'F': 2.228,
    'G': 2.015, 'H': 6.094, 'I': 6.966, 'J': 0.153, 'K': 0.772, 'L': 4.025,
    'M': 2.406, 'N': 6.749, 'O': 7.507, 'P': 1.929, 'Q': 0.095, 'R': 5.987,
    'S': 6.327, 'T': 9.056, 'U': 2.758, 'V': 0.978, 'W': 2.360, 'X': 0.150,
    'Y': 1.974, 'Z': 0.074
}

# Convertir las frecuencias a formato decimal
frecuencias_ingles = {k: v / 100 for k, v in frecuencias_ingles.items()}

def calcular_frecuencia_texto(texto):
    """
    Calcula la frecuencia de las letras en el texto cifrado.
    """
    texto = ''.join([c.upper() for c in texto if c.isalpha()])  # Eliminar no alfabéticos y pasar a mayúsculas
    total_caracteres = len(texto)
    conteo_letras = Counter(texto)
    
    # Calcular la frecuencia de las letras en el texto
    frecuencias_texto = {letra: conteo / total_caracteres for letra, conteo in conteo_letras.items()}
    return frecuencias_texto

def calcular_desplazamiento(frecuencias_texto):
    """
    Calcula el desplazamiento basado en la letra más frecuente en el texto cifrado.
    Se asume que la letra más frecuente corresponde a 'E' en inglés.
    """
    # Encontrar la letra más frecuente en el texto cifrado
    letra_mas_frecuente = max(frecuencias_texto, key=frecuencias_texto.get)
    
    # Suponemos que la letra más frecuente en el texto cifrado corresponde a 'E'
    desplazamiento = (ord(letra_mas_frecuente) - ord('E')) % 26
    return desplazamiento

def descifrar_cifrado_cesar(texto_cifrado, desplazamiento):
    """
    Descifra el texto cifrado utilizando el desplazamiento dado (cifrado César).
    """
    texto_descifrado = []
    for letra in texto_cifrado:
        if letra.isalpha():
            nueva_letra = chr((ord(letra.upper()) - ord('A') - desplazamiento) % 26 + ord('A'))
            texto_descifrado.append(nueva_letra)
        else:
            texto_descifrado.append(letra)  # Mantener los caracteres no alfabéticos como están
    return ''.join(texto_descifrado)

def romper_cifrado_cesar(texto_cifrado):
    """
    Rompe el cifrado de César utilizando el análisis de frecuencia.
    Devuelve el desplazamiento y el texto descifrado.
    """
    # Calcular las frecuencias del texto cifrado
    frecuencias_texto = calcular_frecuencia_texto(texto_cifrado)
    
    # Calcular el desplazamiento basado en la frecuencia de las letras
    desplazamiento = calcular_desplazamiento(frecuencias_texto)
    
    # Descifrar el texto con el desplazamiento encontrado
    texto_descifrado = descifrar_cifrado_cesar(texto_cifrado, desplazamiento)
    
    return desplazamiento, texto_descifrado

# Ejemplo de uso

